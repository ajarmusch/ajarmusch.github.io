---
import { menuLinks } from "@/site-config";

import ThemeToggle from "../ThemeToggle.astro";

const url = new URL(Astro.request.url);
---

<header class="group sticky top-0 z-40 bg-bgColor/95 backdrop-blur-sm border-b border-gray-200/20 py-2 mb-12 transition-all duration-300" id="main-header">
	<div class="flex flex-col">
		<!-- Top row: Name and controls -->
		<div class="flex items-center justify-between w-full mb-2">
			<a
				aria-current={url.pathname === "/" ? "page" : false}
				class="inline-flex items-center"
				href="/"
			>
				<span class="text-2xl font-black sm:text-3xl">Aaron Jarmusch</span>
			</a>
			
			<div class="flex items-center gap-4">
				<ThemeToggle />
				<mobile-button>
					<button
						aria-expanded="false"
						aria-haspopup="menu"
						aria-label="Open main menu"
						class="group relative h-7 w-7 sm:hidden"
						id="toggle-navigation-menu"
						type="button"
					>
						<svg
							aria-hidden="true"
							class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0"
							fill="none"
							focusable="false"
							id="line-svg"
							stroke="currentColor"
							stroke-width="1.5"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M3.75 9h16.5m-16.5 6.75h16.5" stroke-linecap="round" stroke-linejoin="round"></path>
						</svg>
						<svg
							aria-hidden="true"
							class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 text-accent opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100"
							fill="none"
							focusable="false"
							id="cross-svg"
							stroke="currentColor"
							stroke-width="1.5"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"></path>
						</svg>
					</button>
				</mobile-button>
			</div>
		</div>
		
		<!-- Navigation row -->
		<nav
			aria-label="Main menu"
			class="absolute -inset-x-4 top-14 hidden flex-col items-start gap-y-4 rounded-md bg-bgColor/[.85] py-4 text-accent shadow backdrop-blur group-[.menu-open]:z-50 group-[.menu-open]:flex sm:static sm:z-auto sm:flex sm:flex-row sm:items-start sm:divide-x sm:divide-dashed sm:divide-accent sm:rounded-none sm:bg-transparent sm:py-0 sm:shadow-none sm:backdrop-blur-none sm:inset-auto sm:top-auto"
			id="navigation-menu"
		>
			{
				menuLinks.map((link, index) => (
					<a
						aria-current={url.pathname === link.path ? "page" : false}
						class={`py-2 underline-offset-2 sm:py-0 sm:hover:underline ${index === 0 ? 'pl-0 pr-4' : 'px-4'}`}
						data-astro-prefetch
						href={link.path}
					>
						{link.title}
					</a>
				))
			}
		</nav>
	</div>
</header>

<script>
	import { toggleClass } from "@/utils";

	class MobileNavBtn extends HTMLElement {
		private headerEl: HTMLElement;
		private menuOpen: boolean;
		private mobileButtonEl: HTMLButtonElement;

		toggleMobileMenu = () => {
			toggleClass(this.headerEl, "menu-open");
			this.menuOpen = !this.menuOpen;
			this.mobileButtonEl.setAttribute("aria-expanded", this.menuOpen.toString());
		};

		constructor() {
			super();
			this.headerEl = document.getElementById("main-header")!;
			this.mobileButtonEl = this.querySelector("button") as HTMLButtonElement;
			this.menuOpen = false;

			this.mobileButtonEl.addEventListener("click", this.toggleMobileMenu);
		}
	}

	customElements.define("mobile-button", MobileNavBtn);

	// Header sticky behavior
	const header = document.getElementById("main-header")!;
	let isSticky = false;

	// Use Intersection Observer to detect when header becomes sticky
	const sentinelEl = document.createElement('div');
	sentinelEl.style.position = 'absolute';
	sentinelEl.style.top = '0';
	sentinelEl.style.height = '1px';
	sentinelEl.style.visibility = 'hidden';
	document.body.insertBefore(sentinelEl, document.body.firstChild);

	const observer = new IntersectionObserver(
		(entries) => {
			const entry = entries[0];
			const newIsSticky = !entry.isIntersecting;
			
			if (newIsSticky !== isSticky) {
				isSticky = newIsSticky;
				if (isSticky) {
					// When sticky, increase padding
					header.classList.remove('py-2');
					header.classList.add('py-4');
				} else {
					// When not sticky, reduce padding
					header.classList.remove('py-4');
					header.classList.add('py-2');
				}
			}
		},
		{ threshold: 1 }
	);

	observer.observe(sentinelEl);
</script>
